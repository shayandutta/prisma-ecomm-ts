// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role{
  ADMIN
  USER
}

enum OrderEventStatus{
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Role @default(USER)
  defaultShippingAddressId Int?
  defaultBillingAddressId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[] //one user can have multiple addresses
  cartItems CartItems[]
  orders Order[]

  @@map("users")
}



model Address{
  id Int @id @default(autoincrement())
  lineOne String
  lineTwo String
  city String
  country String
  pincode String
  userId Int //foreign key to do the one to many mapping between user and address
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}


model Product{
  id Int @id @default(autoincrement())
  name String
  description String @db.Text //@db.Text -> in order to use unlimited characters in MYSQL(makes the column of text type)
  price Decimal
  tags String //comma separated texts
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartItems CartItems[]
  orders OrderProduct[]

  @@fulltext([name, description, tags])  //in these three columns of the products table we will perform the full text search

  @@map("products")
}


model CartItems{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity Int
  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])


  @@map("cart_items")
}


model Order{
  id Int @id @default(autoincrement())
  netAmount Decimal
  address String //comma separated values will be stored as string
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
  products OrderProduct[]
  events OrderEvent[]


  @@map("orders")
}


model OrderProduct{
    id Int @id @default(autoincrement())
    quantity Int
    status OrderEventStatus @default(PENDING)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    orderId Int
    order Order @relation(fields: [orderId], references: [id])
    productId Int
    product Product @relation(fields: [productId], references: [id])


    @@map("order_products")
}


model OrderEvent{
  id Int @id @default(autoincrement())
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId Int
  order Order @relation(fields: [orderId], references: [id])


  @@map("order_events")
}


// Which id belongs to whom ?

// User.id: Belongs to a user row.
// Address.userId: Belongs to the Address row but points to the owning User.id.
// Product.id: Belongs to a product row.
// CartItems.userId: Belongs to the cart item but points to User.id.
// CartItems.productId: Belongs to the cart item but points to Product.id.
// CartItems.id: The cart itemâ€™s own primary key.
